package temp;

import java.util.HashMap;
import java.util.Map;

public class board {

	public static void main (String arg[]) {

		Map<Integer, Long> map = new HashMap<Integer, Long>();

		for(int i = 0; i<=80; i++){
			if(i < 2) map.put(i, Long.valueOf(i));
			else map.put(i, map.get(i-1)+ map.get(i-2));
		}

		System.out.println(map);

/*
		문제 설명
		어떤 도둑이 최대 int K 무게를 담을 수 있는 배낭을 매고, 금은방에 침입 했습니다.
		이 도둑은 용의주도 하여서, 어제 이미 사전 조사를 했기 때문에 금은방의 모든 보석의 무게와 가치를 전부 알고 있습니다.
		모든 보석의 무게와 가치가 다르기 때문에, 도둑은 자신이 가져갈 수 있는 가장 최대 가치의 보석을 가져가고 싶습니다.

		각 보석의 무게는 int[] w로 주어지며, 가치는 int[] v로 주어집니다.
		i번째 보석의 무게와 가치는 각각 w의 i번째, v의 i번째 이며, 무게와 가치는 정수입니다.
		(모든 보석은 하나씩 존재하며, 동일한 무게와 가치를 지닌 보석은 없습니다.)

		예를 들어 봅시다.
		배낭의 크기 K가 50
		보석1 - 무게 10, 가치 60
		보석2 - 무게 20, 가치 100
		보석3 - 무게 30, 가치 120
		보석2,3을 담으면 가질 수 있는 최대 가치 220을 얻을 수 있습니다.

		이 도둑이 가져갈 수 있는 최대 가치를 구해서 리턴하세요.

		참고 / 제약 사항
		1 ≤ K ≤ 10,000
		1 ≤ 보석의 개수 ≤ 100
		1 ≤ w의 각 요소값 ≤ 1,000
		1 ≤ v의 각 요소값 ≤ 1,000
*/









//		int[] w = {10,20,30};
//		int[] v = {60,100,120};
//	    int K = 50; // 리턴(정답): 220
//
//	    int max = 0;
//	    Map<Integer, Integer> k = new HashMap<Integer, Integer>();
//	    for(int i = 0 ; i < w.length; i++){
////	    	for(int l = 0; l < v.length; l++ ){
////	    		if((w[i] + v[l] > max) && (w[] <=  K)){
////	    			max = w[i] + v[l];
////	    		}
////	    	}
////	    	Max(f(i-1,k - w[i]) + v[i], f(i-1,k));
//	    	k.put(w[i],v[i]);
//	    }
//
//	    for(int i = 1 ; i < w.length-1; i++){
//
//	    }



//	    System.out.println(k);


//	    System.out.println(max);








		/*
		시간 제한 : 2초메모리 제한 : 256MB
		문제 설명
		스타크래프트 경기가 한창이며, 당신은 SCV 입니다.
		팀을 승리로 이끌기 위하여 당신은 최대한 많은 자원을 캐야한다는 임무를 받았습니다.

		극한의 전투속에서 방향전환 기기 일부가 고장이나서 현재 오른쪽과 아래로만 이동할 수 있으며, 맵의 어떠한곳에 도착하면 해당 자원의 값만큼 자원을 캡니다.

		자원맵은 String[] map으로 주어집니다.
		또한, String[] map의 각 요소의 문자열은 "값1 값2 ... 값n" 형태로 주어집니다.(각 값 사이에는 공백 1칸이 있습니다.)

		좌표 (x,y)는 y번째 요소의 문자열 x번째를 나타냅니다.
		예를들어, (1,1)은 1번째 요소의 1번째를 나타냅니다.

		항상 (1,1) 에서 시작하며, 가장 오른쪽 하단으로 가장 많은 자원을 가지고 도착해야합니다.

		예를 들어 아래와 같은 맵이 있다고 가정해봅니다.
		1 0 1
		2 3 1
		2 0 0

		이때 가장 많은 자원을 얻는 방법은 1 → 2 → 3 → 1 → 0 입니다.
		그러므로 얻을 수 있는 최대로 얻을 수 있는 자원의 값은 7입니다.

		얻을 수 있는 최대 자원을 리턴하세요.

		참고 / 제약 사항
		1 ≤ 변수 map의 각 요소의 개수 ≤ 100
		1 ≤ 변수 map의 요소 문자열에 존재하는 숫자의 개수 ≤ 100
		0 ≤ 변수 map의 요소 문자열에 존재하는 각 숫자값 ≤ 1000
		SCV는 오른쪽과 아래쪽으로만 움직일 수 있습니다.
		테스트 케이스
		String[] map = ["1 0 1","2 3 1","2 0 0"] 리턴(정답): 7
		*/



	}
}
